package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate jP;
    private OpIterator child1, child2;
    private TupleDesc td;
    private List<Tuple> childTups = new ArrayList<>();
    private Tuple nextTup1, nextTup2;
    private boolean isFirst = true;


    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.jP= p;
        this.child1 = child1;
        this.child2 = child2;
        this.td = getTupleDesc();
    }

    public JoinPredicate getJoinPredicate() {
        return this.jP;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        int field1 = jP.getField1();        // 得到相关域的索引
        return child1.getTupleDesc().getFieldName(field1);

    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        int field2 = jP.getField2();
        return child2.getTupleDesc().getFieldName(field2);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        TupleDesc newTupleDesc;
        newTupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
        return newTupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.close();
        this.open();

    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        Tuple nowTuple = null;
        while(child1.hasNext() || child2.hasNext()) {
            if(isFirst || !child2.hasNext()) {
                isFirst = false;
                nextTup1 = child1.next();
                if(!child2.hasNext())
                    child2.rewind();
            }
            while(child2.hasNext()) {
                nextTup2 = child2.next();
                if(jP.filter(nextTup1, nextTup2)) {
                    nowTuple = new Tuple(getTupleDesc());
                    int len1 = nextTup1.getTupleDesc().numFields();
                    for (int i = 0; i < td.numFields(); ++i) {
                        if (i < len1)
                            nowTuple.setField(i, nextTup1.getField(i));
                        else
                            nowTuple.setField(i, nextTup2.getField(i - len1));
                    }
                    childTups.add(nowTuple);
                    return nowTuple;
                }
            }
        }
        return null;
    }
    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        if(children[0] != child1) child1 = children[0];
        if(children[1] != child2) child2 = children[1];
    }
}
